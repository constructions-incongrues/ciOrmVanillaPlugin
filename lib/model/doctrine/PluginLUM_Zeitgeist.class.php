<?php

/**
 * PluginLUM_Zeitgeist
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginLUM_Zeitgeist extends BaseLUM_Zeitgeist
{
    /**
    * Returns Zeitgeist's mixes.
    *
    * @return array
    */
    public function getMixes()
    {
        $q = Doctrine_Query::create()
        ->select('d.discussionid, d.name, d.firstcommentid, r.labelname, r.downloadlink')
        ->from('LUM_Discussion d')
        ->innerJoin('d.LUM_Releases r')
        ->where('d.datecreated >= ?')
        ->andWhere('d.datecreated <= ?')
        ->andWhere('d.active = 1')
        ->andWhere('r.ismix = 1');

        $mixes = $q->execute(array($this->datestart, $this->dateend), Doctrine_Core::HYDRATE_ARRAY);

        return $mixes;
    }

    /**
     * Returns Zeitgeist's releases.
     *
     * @return array
     */
    public function getReleases()
    {
        $q = Doctrine_Query::create()
        ->select('d.discussionid, d.name, d.firstcommentid, r.labelname, r.downloadlink')
        ->from('LUM_Discussion d')
        ->innerJoin('d.LUM_Releases r')
        ->where('d.datecreated >= ?')
        ->andWhere('d.datecreated <= ?')
        ->andWhere('d.active = 1')
        ->andWhere('r.ismix != 1');

        $releases = $q->execute(array($this->datestart, $this->dateend), Doctrine_Core::HYDRATE_ARRAY);

        return $releases;
    }

    /**
     * Returns Zeitgeist's upcoming events.
     *
     * @return array
     */
    public function getUpcomingEvents($daysInterval = 7)
    {
        $q = Doctrine_Query::create()
        ->select('d.discussionid, d.name, d.firstcommentid, e.date, e.city, e.country')
        ->from('LUM_Discussion d')
        ->innerJoin('d.LUM_Event e')
        ->where('e.date >= ?')
        ->andWhere('e.date <= DATE_ADD(?, INTERVAL ? DAY)')
        ->andWhere('d.active = 1')
        ->orderBy('e.date asc');

        $events = $q->execute(array($this->dateend, $this->dateend, $daysInterval), Doctrine_Core::HYDRATE_ARRAY);

        return $events;
    }

    /**
     * Returns Zeitgeist's newcomers.
     *
     * @return array
     */
    public function getUsers()
    {
        $q = Doctrine_Query::create()
        ->select('u.userid, u.name')
        ->from('LUM_User u')
        ->where('u.datefirstvisit >= ?')
        ->andWhere('u.datefirstvisit <= ?');

        $users = $q->execute(array($this->datestart, $this->dateend), Doctrine_Core::HYDRATE_ARRAY);

        return $users;
    }

    public function getAnanasExMachinaFormated()
    {
        $text = nl2br($this->getAnanasexmachina());

        return $text;
    }
}
