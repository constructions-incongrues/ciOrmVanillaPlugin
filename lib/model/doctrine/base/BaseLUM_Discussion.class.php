<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LUM_Discussion', 'doctrine');

/**
 * BaseLUM_Discussion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $discussionid
 * @property integer $authuserid
 * @property integer $whisperuserid
 * @property integer $firstcommentid
 * @property integer $lastuserid
 * @property enum $active
 * @property enum $closed
 * @property enum $sticky
 * @property enum $sink
 * @property string $name
 * @property timestamp $datecreated
 * @property timestamp $datelastactive
 * @property integer $countcomments
 * @property integer $categoryid
 * @property integer $whispertolastuserid
 * @property integer $whisperfromlastuserid
 * @property timestamp $datelastwhisper
 * @property integer $totalwhispercount
 * @property LUM_Releases $LUM_Releases
 * @property LUM_Event $LUM_Event
 * 
 * @method integer        getDiscussionid()          Returns the current record's "discussionid" value
 * @method integer        getAuthuserid()            Returns the current record's "authuserid" value
 * @method integer        getWhisperuserid()         Returns the current record's "whisperuserid" value
 * @method integer        getFirstcommentid()        Returns the current record's "firstcommentid" value
 * @method integer        getLastuserid()            Returns the current record's "lastuserid" value
 * @method enum           getActive()                Returns the current record's "active" value
 * @method enum           getClosed()                Returns the current record's "closed" value
 * @method enum           getSticky()                Returns the current record's "sticky" value
 * @method enum           getSink()                  Returns the current record's "sink" value
 * @method string         getName()                  Returns the current record's "name" value
 * @method timestamp      getDatecreated()           Returns the current record's "datecreated" value
 * @method timestamp      getDatelastactive()        Returns the current record's "datelastactive" value
 * @method integer        getCountcomments()         Returns the current record's "countcomments" value
 * @method integer        getCategoryid()            Returns the current record's "categoryid" value
 * @method integer        getWhispertolastuserid()   Returns the current record's "whispertolastuserid" value
 * @method integer        getWhisperfromlastuserid() Returns the current record's "whisperfromlastuserid" value
 * @method timestamp      getDatelastwhisper()       Returns the current record's "datelastwhisper" value
 * @method integer        getTotalwhispercount()     Returns the current record's "totalwhispercount" value
 * @method LUM_Releases   getLUMReleases()           Returns the current record's "LUM_Releases" value
 * @method LUM_Event      getLUMEvent()              Returns the current record's "LUM_Event" value
 * @method LUM_Discussion setDiscussionid()          Sets the current record's "discussionid" value
 * @method LUM_Discussion setAuthuserid()            Sets the current record's "authuserid" value
 * @method LUM_Discussion setWhisperuserid()         Sets the current record's "whisperuserid" value
 * @method LUM_Discussion setFirstcommentid()        Sets the current record's "firstcommentid" value
 * @method LUM_Discussion setLastuserid()            Sets the current record's "lastuserid" value
 * @method LUM_Discussion setActive()                Sets the current record's "active" value
 * @method LUM_Discussion setClosed()                Sets the current record's "closed" value
 * @method LUM_Discussion setSticky()                Sets the current record's "sticky" value
 * @method LUM_Discussion setSink()                  Sets the current record's "sink" value
 * @method LUM_Discussion setName()                  Sets the current record's "name" value
 * @method LUM_Discussion setDatecreated()           Sets the current record's "datecreated" value
 * @method LUM_Discussion setDatelastactive()        Sets the current record's "datelastactive" value
 * @method LUM_Discussion setCountcomments()         Sets the current record's "countcomments" value
 * @method LUM_Discussion setCategoryid()            Sets the current record's "categoryid" value
 * @method LUM_Discussion setWhispertolastuserid()   Sets the current record's "whispertolastuserid" value
 * @method LUM_Discussion setWhisperfromlastuserid() Sets the current record's "whisperfromlastuserid" value
 * @method LUM_Discussion setDatelastwhisper()       Sets the current record's "datelastwhisper" value
 * @method LUM_Discussion setTotalwhispercount()     Sets the current record's "totalwhispercount" value
 * @method LUM_Discussion setLUMReleases()           Sets the current record's "LUM_Releases" value
 * @method LUM_Discussion setLUMEvent()              Sets the current record's "LUM_Event" value
 * 
 * @package    admin-incongrue
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLUM_Discussion extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('LUM_Discussion');
        $this->hasColumn('discussionid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('authuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('whisperuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('firstcommentid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('lastuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('active', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '0',
             ),
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('closed', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '0',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('sticky', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '9',
              1 => '8',
              2 => '7',
              3 => '6',
              4 => '5',
              5 => '4',
              6 => '3',
              7 => '2',
              8 => '1',
              9 => '0',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('sink', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '0',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('datecreated', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('datelastactive', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('countcomments', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('categoryid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('whispertolastuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('whisperfromlastuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('datelastwhisper', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('totalwhispercount', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('LUM_Releases', array(
             'local' => 'discussionid',
             'foreign' => 'discussionid'));

        $this->hasOne('LUM_Event', array(
             'local' => 'discussionid',
             'foreign' => 'discussionid'));
    }
}