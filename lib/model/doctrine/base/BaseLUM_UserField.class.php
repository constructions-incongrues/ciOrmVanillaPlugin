<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LUM_UserField', 'doctrine');

/**
 * BaseLUM_UserField
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $userfieldid
 * @property integer $userid
 * @property integer $userfielddefid
 * @property integer $valueset
 * @property string $valuetext
 * @property integer $valueint
 * @property float $valuefloat
 * 
 * @method integer       getUserfieldid()    Returns the current record's "userfieldid" value
 * @method integer       getUserid()         Returns the current record's "userid" value
 * @method integer       getUserfielddefid() Returns the current record's "userfielddefid" value
 * @method integer       getValueset()       Returns the current record's "valueset" value
 * @method string        getValuetext()      Returns the current record's "valuetext" value
 * @method integer       getValueint()       Returns the current record's "valueint" value
 * @method float         getValuefloat()     Returns the current record's "valuefloat" value
 * @method LUM_UserField setUserfieldid()    Sets the current record's "userfieldid" value
 * @method LUM_UserField setUserid()         Sets the current record's "userid" value
 * @method LUM_UserField setUserfielddefid() Sets the current record's "userfielddefid" value
 * @method LUM_UserField setValueset()       Sets the current record's "valueset" value
 * @method LUM_UserField setValuetext()      Sets the current record's "valuetext" value
 * @method LUM_UserField setValueint()       Sets the current record's "valueint" value
 * @method LUM_UserField setValuefloat()     Sets the current record's "valuefloat" value
 * 
 * @package    admin-incongrue
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLUM_UserField extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('LUM_UserField');
        $this->hasColumn('userfieldid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('userid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('userfielddefid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('valueset', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('valuetext', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('valueint', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('valuefloat', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}