<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LUM_Attachment', 'doctrine');

/**
 * BaseLUM_Attachment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $attachmentid
 * @property integer $userid
 * @property integer $discussionid
 * @property integer $commentid
 * @property string $title
 * @property string $description
 * @property string $name
 * @property string $path
 * @property integer $size
 * @property string $mimetype
 * @property timestamp $datecreated
 * @property timestamp $datemodified
 * 
 * @method integer        getAttachmentid() Returns the current record's "attachmentid" value
 * @method integer        getUserid()       Returns the current record's "userid" value
 * @method integer        getDiscussionid() Returns the current record's "discussionid" value
 * @method integer        getCommentid()    Returns the current record's "commentid" value
 * @method string         getTitle()        Returns the current record's "title" value
 * @method string         getDescription()  Returns the current record's "description" value
 * @method string         getName()         Returns the current record's "name" value
 * @method string         getPath()         Returns the current record's "path" value
 * @method integer        getSize()         Returns the current record's "size" value
 * @method string         getMimetype()     Returns the current record's "mimetype" value
 * @method timestamp      getDatecreated()  Returns the current record's "datecreated" value
 * @method timestamp      getDatemodified() Returns the current record's "datemodified" value
 * @method LUM_Attachment setAttachmentid() Sets the current record's "attachmentid" value
 * @method LUM_Attachment setUserid()       Sets the current record's "userid" value
 * @method LUM_Attachment setDiscussionid() Sets the current record's "discussionid" value
 * @method LUM_Attachment setCommentid()    Sets the current record's "commentid" value
 * @method LUM_Attachment setTitle()        Sets the current record's "title" value
 * @method LUM_Attachment setDescription()  Sets the current record's "description" value
 * @method LUM_Attachment setName()         Sets the current record's "name" value
 * @method LUM_Attachment setPath()         Sets the current record's "path" value
 * @method LUM_Attachment setSize()         Sets the current record's "size" value
 * @method LUM_Attachment setMimetype()     Sets the current record's "mimetype" value
 * @method LUM_Attachment setDatecreated()  Sets the current record's "datecreated" value
 * @method LUM_Attachment setDatemodified() Sets the current record's "datemodified" value
 * 
 * @package    admin-incongrue
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLUM_Attachment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('LUM_Attachment');
        $this->hasColumn('attachmentid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('userid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('discussionid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('commentid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('name', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('path', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('size', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('mimetype', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('datecreated', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('datemodified', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}