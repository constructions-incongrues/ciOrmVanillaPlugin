<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LUM_UserRoleHistory', 'doctrine');

/**
 * BaseLUM_UserRoleHistory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $userid
 * @property integer $roleid
 * @property timestamp $date
 * @property integer $adminuserid
 * @property string $notes
 * @property string $remoteip
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method integer             getUserid()      Returns the current record's "userid" value
 * @method integer             getRoleid()      Returns the current record's "roleid" value
 * @method timestamp           getDate()        Returns the current record's "date" value
 * @method integer             getAdminuserid() Returns the current record's "adminuserid" value
 * @method string              getNotes()       Returns the current record's "notes" value
 * @method string              getRemoteip()    Returns the current record's "remoteip" value
 * @method LUM_UserRoleHistory setId()          Sets the current record's "id" value
 * @method LUM_UserRoleHistory setUserid()      Sets the current record's "userid" value
 * @method LUM_UserRoleHistory setRoleid()      Sets the current record's "roleid" value
 * @method LUM_UserRoleHistory setDate()        Sets the current record's "date" value
 * @method LUM_UserRoleHistory setAdminuserid() Sets the current record's "adminuserid" value
 * @method LUM_UserRoleHistory setNotes()       Sets the current record's "notes" value
 * @method LUM_UserRoleHistory setRemoteip()    Sets the current record's "remoteip" value
 * 
 * @package    admin-incongrue
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLUM_UserRoleHistory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('LUM_UserRoleHistory');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 8,
             ));
        $this->hasColumn('userid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('roleid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('adminuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('notes', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('remoteip', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}