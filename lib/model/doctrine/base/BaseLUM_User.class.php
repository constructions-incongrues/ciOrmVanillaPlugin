<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LUM_User', 'doctrine');

/**
 * BaseLUM_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $userid
 * @property integer $roleid
 * @property integer $styleid
 * @property string $customstyle
 * @property string $firstname
 * @property string $lastname
 * @property string $name
 * @property blob $password
 * @property string $verificationkey
 * @property string $emailverificationkey
 * @property string $email
 * @property enum $utilizeemail
 * @property enum $showname
 * @property string $icon
 * @property string $picture
 * @property string $attributes
 * @property integer $countvisit
 * @property integer $countdiscussions
 * @property integer $countcomments
 * @property timestamp $datefirstvisit
 * @property timestamp $datelastactive
 * @property string $remoteip
 * @property timestamp $lastdiscussionpost
 * @property integer $discussionspamcheck
 * @property timestamp $lastcommentpost
 * @property integer $commentspamcheck
 * @property enum $userblockscategories
 * @property string $defaultformattype
 * @property string $discovery
 * @property string $preferences
 * @property enum $sendnewapplicantnotifications
 * @property integer $subscribeown
 * @property integer $notified
 * @property integer $ldupdatetime
 * @property timestamp $ldlastupdate
 * @property integer $subscribecomment
 * @property integer $subscribedentireforum
 * @property integer $keepemailing
 * 
 * @method integer   getUserid()                        Returns the current record's "userid" value
 * @method integer   getRoleid()                        Returns the current record's "roleid" value
 * @method integer   getStyleid()                       Returns the current record's "styleid" value
 * @method string    getCustomstyle()                   Returns the current record's "customstyle" value
 * @method string    getFirstname()                     Returns the current record's "firstname" value
 * @method string    getLastname()                      Returns the current record's "lastname" value
 * @method string    getName()                          Returns the current record's "name" value
 * @method blob      getPassword()                      Returns the current record's "password" value
 * @method string    getVerificationkey()               Returns the current record's "verificationkey" value
 * @method string    getEmailverificationkey()          Returns the current record's "emailverificationkey" value
 * @method string    getEmail()                         Returns the current record's "email" value
 * @method enum      getUtilizeemail()                  Returns the current record's "utilizeemail" value
 * @method enum      getShowname()                      Returns the current record's "showname" value
 * @method string    getIcon()                          Returns the current record's "icon" value
 * @method string    getPicture()                       Returns the current record's "picture" value
 * @method string    getAttributes()                    Returns the current record's "attributes" value
 * @method integer   getCountvisit()                    Returns the current record's "countvisit" value
 * @method integer   getCountdiscussions()              Returns the current record's "countdiscussions" value
 * @method integer   getCountcomments()                 Returns the current record's "countcomments" value
 * @method timestamp getDatefirstvisit()                Returns the current record's "datefirstvisit" value
 * @method timestamp getDatelastactive()                Returns the current record's "datelastactive" value
 * @method string    getRemoteip()                      Returns the current record's "remoteip" value
 * @method timestamp getLastdiscussionpost()            Returns the current record's "lastdiscussionpost" value
 * @method integer   getDiscussionspamcheck()           Returns the current record's "discussionspamcheck" value
 * @method timestamp getLastcommentpost()               Returns the current record's "lastcommentpost" value
 * @method integer   getCommentspamcheck()              Returns the current record's "commentspamcheck" value
 * @method enum      getUserblockscategories()          Returns the current record's "userblockscategories" value
 * @method string    getDefaultformattype()             Returns the current record's "defaultformattype" value
 * @method string    getDiscovery()                     Returns the current record's "discovery" value
 * @method string    getPreferences()                   Returns the current record's "preferences" value
 * @method enum      getSendnewapplicantnotifications() Returns the current record's "sendnewapplicantnotifications" value
 * @method integer   getSubscribeown()                  Returns the current record's "subscribeown" value
 * @method integer   getNotified()                      Returns the current record's "notified" value
 * @method integer   getLdupdatetime()                  Returns the current record's "ldupdatetime" value
 * @method timestamp getLdlastupdate()                  Returns the current record's "ldlastupdate" value
 * @method integer   getSubscribecomment()              Returns the current record's "subscribecomment" value
 * @method integer   getSubscribedentireforum()         Returns the current record's "subscribedentireforum" value
 * @method integer   getKeepemailing()                  Returns the current record's "keepemailing" value
 * @method LUM_User  setUserid()                        Sets the current record's "userid" value
 * @method LUM_User  setRoleid()                        Sets the current record's "roleid" value
 * @method LUM_User  setStyleid()                       Sets the current record's "styleid" value
 * @method LUM_User  setCustomstyle()                   Sets the current record's "customstyle" value
 * @method LUM_User  setFirstname()                     Sets the current record's "firstname" value
 * @method LUM_User  setLastname()                      Sets the current record's "lastname" value
 * @method LUM_User  setName()                          Sets the current record's "name" value
 * @method LUM_User  setPassword()                      Sets the current record's "password" value
 * @method LUM_User  setVerificationkey()               Sets the current record's "verificationkey" value
 * @method LUM_User  setEmailverificationkey()          Sets the current record's "emailverificationkey" value
 * @method LUM_User  setEmail()                         Sets the current record's "email" value
 * @method LUM_User  setUtilizeemail()                  Sets the current record's "utilizeemail" value
 * @method LUM_User  setShowname()                      Sets the current record's "showname" value
 * @method LUM_User  setIcon()                          Sets the current record's "icon" value
 * @method LUM_User  setPicture()                       Sets the current record's "picture" value
 * @method LUM_User  setAttributes()                    Sets the current record's "attributes" value
 * @method LUM_User  setCountvisit()                    Sets the current record's "countvisit" value
 * @method LUM_User  setCountdiscussions()              Sets the current record's "countdiscussions" value
 * @method LUM_User  setCountcomments()                 Sets the current record's "countcomments" value
 * @method LUM_User  setDatefirstvisit()                Sets the current record's "datefirstvisit" value
 * @method LUM_User  setDatelastactive()                Sets the current record's "datelastactive" value
 * @method LUM_User  setRemoteip()                      Sets the current record's "remoteip" value
 * @method LUM_User  setLastdiscussionpost()            Sets the current record's "lastdiscussionpost" value
 * @method LUM_User  setDiscussionspamcheck()           Sets the current record's "discussionspamcheck" value
 * @method LUM_User  setLastcommentpost()               Sets the current record's "lastcommentpost" value
 * @method LUM_User  setCommentspamcheck()              Sets the current record's "commentspamcheck" value
 * @method LUM_User  setUserblockscategories()          Sets the current record's "userblockscategories" value
 * @method LUM_User  setDefaultformattype()             Sets the current record's "defaultformattype" value
 * @method LUM_User  setDiscovery()                     Sets the current record's "discovery" value
 * @method LUM_User  setPreferences()                   Sets the current record's "preferences" value
 * @method LUM_User  setSendnewapplicantnotifications() Sets the current record's "sendnewapplicantnotifications" value
 * @method LUM_User  setSubscribeown()                  Sets the current record's "subscribeown" value
 * @method LUM_User  setNotified()                      Sets the current record's "notified" value
 * @method LUM_User  setLdupdatetime()                  Sets the current record's "ldupdatetime" value
 * @method LUM_User  setLdlastupdate()                  Sets the current record's "ldlastupdate" value
 * @method LUM_User  setSubscribecomment()              Sets the current record's "subscribecomment" value
 * @method LUM_User  setSubscribedentireforum()         Sets the current record's "subscribedentireforum" value
 * @method LUM_User  setKeepemailing()                  Sets the current record's "keepemailing" value
 * 
 * @package    admin-incongrue
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLUM_User extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('LUM_User');
        $this->hasColumn('userid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('roleid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('styleid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('customstyle', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('firstname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('lastname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('name', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('password', 'blob', null, array(
             'type' => 'blob',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('verificationkey', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('emailverificationkey', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('email', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('utilizeemail', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '0',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('showname', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '0',
             ),
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('icon', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('picture', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('attributes', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('countvisit', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('countdiscussions', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('countcomments', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('datefirstvisit', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('datelastactive', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('remoteip', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('lastdiscussionpost', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('discussionspamcheck', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('lastcommentpost', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('commentspamcheck', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('userblockscategories', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '0',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('defaultformattype', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('discovery', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('preferences', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('sendnewapplicantnotifications', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '0',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('subscribeown', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('notified', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('ldupdatetime', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('ldlastupdate', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('subscribecomment', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('subscribedentireforum', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('keepemailing', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}