<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LUM_Comment', 'doctrine');

/**
 * BaseLUM_Comment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $commentid
 * @property integer $discussionid
 * @property integer $authuserid
 * @property timestamp $datecreated
 * @property integer $edituserid
 * @property timestamp $dateedited
 * @property integer $whisperuserid
 * @property string $body
 * @property string $formattype
 * @property enum $deleted
 * @property timestamp $datedeleted
 * @property integer $deleteuserid
 * @property string $remoteip
 * @property Doctrine_Collection $LUM_CommentHas_LUM_Entity
 * 
 * @method integer             getCommentid()                 Returns the current record's "commentid" value
 * @method integer             getDiscussionid()              Returns the current record's "discussionid" value
 * @method integer             getAuthuserid()                Returns the current record's "authuserid" value
 * @method timestamp           getDatecreated()               Returns the current record's "datecreated" value
 * @method integer             getEdituserid()                Returns the current record's "edituserid" value
 * @method timestamp           getDateedited()                Returns the current record's "dateedited" value
 * @method integer             getWhisperuserid()             Returns the current record's "whisperuserid" value
 * @method string              getBody()                      Returns the current record's "body" value
 * @method string              getFormattype()                Returns the current record's "formattype" value
 * @method enum                getDeleted()                   Returns the current record's "deleted" value
 * @method timestamp           getDatedeleted()               Returns the current record's "datedeleted" value
 * @method integer             getDeleteuserid()              Returns the current record's "deleteuserid" value
 * @method string              getRemoteip()                  Returns the current record's "remoteip" value
 * @method Doctrine_Collection getLUMCommentHasLUMEntity()    Returns the current record's "LUM_CommentHas_LUM_Entity" collection
 * @method LUM_Comment         setCommentid()                 Sets the current record's "commentid" value
 * @method LUM_Comment         setDiscussionid()              Sets the current record's "discussionid" value
 * @method LUM_Comment         setAuthuserid()                Sets the current record's "authuserid" value
 * @method LUM_Comment         setDatecreated()               Sets the current record's "datecreated" value
 * @method LUM_Comment         setEdituserid()                Sets the current record's "edituserid" value
 * @method LUM_Comment         setDateedited()                Sets the current record's "dateedited" value
 * @method LUM_Comment         setWhisperuserid()             Sets the current record's "whisperuserid" value
 * @method LUM_Comment         setBody()                      Sets the current record's "body" value
 * @method LUM_Comment         setFormattype()                Sets the current record's "formattype" value
 * @method LUM_Comment         setDeleted()                   Sets the current record's "deleted" value
 * @method LUM_Comment         setDatedeleted()               Sets the current record's "datedeleted" value
 * @method LUM_Comment         setDeleteuserid()              Sets the current record's "deleteuserid" value
 * @method LUM_Comment         setRemoteip()                  Sets the current record's "remoteip" value
 * @method LUM_Comment         setLUMCommentHasLUMEntity()    Sets the current record's "LUM_CommentHas_LUM_Entity" collection
 * 
 * @package    admin-incongrue
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLUM_Comment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('LUM_Comment');
        $this->hasColumn('commentid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('discussionid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('authuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('datecreated', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('edituserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('dateedited', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('whisperuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('body', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('formattype', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('deleted', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '0',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('datedeleted', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('deleteuserid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('remoteip', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('LUM_CommentHas_LUM_Entity', array(
             'local' => 'commentid',
             'foreign' => 'commentid'));
    }
}